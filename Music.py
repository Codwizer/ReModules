# ---------------------------------------------------------------------------------
# Name: Music
# Description: Search for music through music bots.
# Author: @hikka_mods
# Commands:
# ym / vkm
# ---------------------------------------------------------------------------------

# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @hikka_mods
# scope: Music
# scope: Music 0.0.1
# ---------------------------------------------------------------------------------
from .. import loader, utils


@loader.tds
class MusicMod(loader.Module):
    """–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤."""

    strings = {
        "name": "Music",
        "nenashel": (
            "<emoji document_id=5337117114392127164>ü§∑‚Äç‚ôÇ</emoji> <b>And what should I look for?</b>"
        ),
        "searching": "<emoji document_id=4918235297679934237>‚å®Ô∏è</emoji> <b>Searching...</b>",
        "done": "<emoji document_id=5336965905773504919>üó£</emoji> <b>Perhaps this is the track you were looking for</b>",
        "error": "<emoji document_id=5228947933545635555>üò´</emoji> <b>I couldn't find a track with the title <code>{}</code></b>",
    }

    strings_ru = {
        "nenashel": (
            "<emoji document_id=5337117114392127164>ü§∑‚Äç‚ôÇ</emoji> <b>–ê —á—Ç–æ –∏—Å–∫–∞—Ç—å —Ç–æ?</b>"
        ),
        "searching": "<emoji document_id=4918235297679934237>‚å®Ô∏è</emoji> <b>–ü–æ–∏—Å–∫...</b>",
        "done": "<emoji document_id=5336965905773504919>üó£</emoji> <b>–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Ç–æ—Ç —Ç—Ä–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–∫–∞–ª–∏</b>",
        "error": "<emoji document_id=5228947933545635555>üò´</emoji> <b>–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <code>{}</code><b>",
    }

    async def ymcmd(self, message):
        """- –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ Yandex music"""
        args = utils.get_args_raw(message)
        r = await message.get_reply_message()
        bot = "@Yandex_music_download_bot"
        if not args:
            return await message.edit(self.strings("nenashel"))
        try:
            await message.edit(self.strings("searching"))
            music = await message.client.inline_query(bot, args)
            await message.delete()
            try:
                await message.client.send_file(
                    message.to_id,
                    music[1].result.document,
                    caption=self.strings("done"),
                    reply_to=utils.get_topic(message) if r else None,
                )
            except:
                await message.client.send_file(
                    message.to_id,
                    music[3].result.document,
                    caption=self.strings("done"),
                    reply_to=utils.get_topic(message) if r else None,
                )
        except:
            return await message.client.send_message(
                message.chat_id, self.strings("error").format(args=args)
            )

    async def vkmcmd(self, message):
        """- –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ VK"""
        args = utils.get_args_raw(message)
        r = await message.get_reply_message()
        bot = "@vkmusic_bot"
        if not args:
            return await message.edit(self.strings("nenashel"))
        try:
            await message.edit(self.strings("searching"))
            music = await message.client.inline_query(bot, args)
            await message.delete()
            try:
                await message.client.send_file(
                    message.to_id,
                    music[1].result.document,
                    caption=self.strings("done"),
                    reply_to=utils.get_topic(message) if r else None,
                )
            except:
                await message.client.send_file(
                    message.to_id,
                    music[3].result.document,
                    caption=self.strings("done"),
                    reply_to=utils.get_topic(message) if r else None,
                )
        except:
            return await message.client.send_message(
                message.chat_id, self.strings("error").format(args=args)
            )
